{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/microevent.ts/lib/Event.js",
    "node_modules/microevent.ts/lib/index.js",
    "node_modules/worker-rpc/lib/RpcProvider.js",
    "node_modules/worker-rpc/lib/index.js",
    "src/tools/pool/Pool.ts",
    "src/tools/pool/PoolMember.ts",
    "src/video/processing/FrameMergeProcessor.ts",
    "src/video/processing/PassthroughProcessor.ts",
    "src/video/processing/ProcessorFactory.ts",
    "src/video/processing/ProcessorPipeline.ts",
    "src/video/processing/config.ts",
    "src/video/processing/worker/PipelineHost.ts",
    "src/video/processing/worker/messages.ts",
    "src/video/surface/ArrayBufferSurface.ts",
    "worker/src/main/video-pipeline.ts",
    "worker/src/rpc.ts"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\nvar factories = [];\nfactories[0] = function () {\n    return function dispatcher0() { };\n};\nfactories[1] = function (callback, context) {\n    if (typeof (context) === 'undefined')\n        return callback;\n    return function dispatcher1(payload) {\n        callback(payload, context);\n    };\n};\nfunction getFactory(handlerCount) {\n    if (!factories[handlerCount])\n        factories[handlerCount] = compileFactory(handlerCount);\n    return factories[handlerCount];\n}\nfunction compileFactory(handlerCount) {\n    var src = 'return function dispatcher' + handlerCount + '(payload) {\\n';\n    var argsHandlers = [], argsContexts = [];\n    for (var i = 0; i < handlerCount; i++) {\n        argsHandlers.push('cb' + i);\n        argsContexts.push('ctx' + i);\n        src += '    cb' + i + '(payload, ctx' + i + ');\\n';\n    }\n    src += '};';\n    return new (Function.bind.apply(Function, [void 0].concat(argsHandlers.concat(argsContexts), [src])))();\n}\nvar Event = (function () {\n    function Event() {\n        this.hasHandlers = false;\n        this._handlers = [];\n        this._contexts = [];\n        this._createDispatcher();\n    }\n    Event.prototype.addHandler = function (handler, context) {\n        if (!this.isHandlerAttached(handler, context)) {\n            this._handlers.push(handler);\n            this._contexts.push(context);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.removeHandler = function (handler, context) {\n        var idx = this._getHandlerIndex(handler, context);\n        if (typeof (idx) !== 'undefined') {\n            this._handlers.splice(idx, 1);\n            this._contexts.splice(idx, 1);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.isHandlerAttached = function (handler, context) {\n        return typeof (this._getHandlerIndex(handler, context)) !== 'undefined';\n    };\n    Event.prototype._updateHasHandlers = function () {\n        this.hasHandlers = !!this._handlers.length;\n    };\n    Event.prototype._getHandlerIndex = function (handler, context) {\n        var handlerCount = this._handlers.length;\n        var idx;\n        for (idx = 0; idx < handlerCount; idx++) {\n            if (this._handlers[idx] === handler && this._contexts[idx] === context)\n                break;\n        }\n        return idx < handlerCount ? idx : undefined;\n    };\n    Event.prototype._createDispatcher = function () {\n        this.dispatch = getFactory(this._handlers.length).apply(this, this._handlers.concat(this._contexts));\n    };\n    return Event;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Event;\n",
    "\"use strict\";\nvar Event_1 = require('./Event');\nexports.Event = Event_1.default;\n",
    "\"use strict\";\nvar microevent_ts_1 = require('microevent.ts');\nvar MSG_RESOLVE_TRANSACTION = \"resolve_transaction\", MSG_REJECT_TRANSACTION = \"reject_transaction\", MSG_ERROR = \"error\";\nvar RpcProvider = (function () {\n    function RpcProvider(_dispatch, _rpcTimeout) {\n        if (_rpcTimeout === void 0) { _rpcTimeout = 0; }\n        this._dispatch = _dispatch;\n        this._rpcTimeout = _rpcTimeout;\n        this.error = new microevent_ts_1.Event();\n        this._rpcHandlers = {};\n        this._signalHandlers = {};\n        this._pendingTransactions = {};\n        this._nextTransactionId = 0;\n    }\n    RpcProvider.prototype.dispatch = function (payload) {\n        var message = payload;\n        switch (message.type) {\n            case RpcProvider.MessageType.signal:\n                return this._handleSignal(message);\n            case RpcProvider.MessageType.rpc:\n                return this._handeRpc(message);\n            case RpcProvider.MessageType.internal:\n                return this._handleInternal(message);\n            default:\n                this._raiseError(\"invalid message type \" + message.type);\n        }\n    };\n    RpcProvider.prototype.rpc = function (id, payload, transfer) {\n        var _this = this;\n        var transactionId = this._nextTransactionId++;\n        this._dispatch({\n            type: RpcProvider.MessageType.rpc,\n            transactionId: transactionId,\n            id: id,\n            payload: payload\n        }, transfer ? transfer : undefined);\n        return new Promise(function (resolve, reject) {\n            var transaction = _this._pendingTransactions[transactionId] = {\n                id: transactionId,\n                resolve: resolve,\n                reject: reject\n            };\n            if (_this._rpcTimeout > 0) {\n                _this._pendingTransactions[transactionId].timeoutHandle =\n                    setTimeout(function () { return _this._transactionTimeout(transaction); }, _this._rpcTimeout);\n            }\n        });\n    };\n    ;\n    RpcProvider.prototype.signal = function (id, payload, transfer) {\n        this._dispatch({\n            type: RpcProvider.MessageType.signal,\n            id: id,\n            payload: payload,\n        }, transfer ? transfer : undefined);\n        return this;\n    };\n    RpcProvider.prototype.registerRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            throw new Error(\"rpc handler for \" + id + \" already registered\");\n        }\n        this._rpcHandlers[id] = handler;\n        return this;\n    };\n    ;\n    RpcProvider.prototype.registerSignalHandler = function (id, handler) {\n        if (!this._signalHandlers[id]) {\n            this._signalHandlers[id] = [];\n        }\n        this._signalHandlers[id].push(handler);\n        return this;\n    };\n    RpcProvider.prototype.deregisterRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            delete this._rpcHandlers[id];\n        }\n        return this;\n    };\n    ;\n    RpcProvider.prototype.deregisterSignalHandler = function (id, handler) {\n        if (this._signalHandlers[id]) {\n            this._signalHandlers[id] = this._signalHandlers[id].filter(function (h) { return handler !== h; });\n        }\n        return this;\n    };\n    RpcProvider.prototype._raiseError = function (error) {\n        this.error.dispatch(new Error(error));\n        this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_ERROR,\n            payload: error\n        });\n    };\n    RpcProvider.prototype._handleSignal = function (message) {\n        if (!this._signalHandlers[message.id]) {\n            return this._raiseError(\"invalid signal \" + message.id);\n        }\n        this._signalHandlers[message.id].forEach(function (handler) { return handler(message.payload); });\n    };\n    RpcProvider.prototype._handeRpc = function (message) {\n        var _this = this;\n        if (!this._rpcHandlers[message.id]) {\n            return this._raiseError(\"invalid rpc \" + message.id);\n        }\n        Promise.resolve(this._rpcHandlers[message.id](message.payload))\n            .then(function (result) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_RESOLVE_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: result\n        }); }, function (reason) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_REJECT_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: reason\n        }); });\n    };\n    RpcProvider.prototype._handleInternal = function (message) {\n        switch (message.id) {\n            case MSG_RESOLVE_TRANSACTION:\n                if (!this._pendingTransactions[message.transactionId]) {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                this._pendingTransactions[message.transactionId].resolve(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_REJECT_TRANSACTION:\n                if (!this._pendingTransactions[message.transactionId]) {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                this._pendingTransactions[message.transactionId].reject(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_ERROR:\n                this.error.dispatch(new Error(\"remote error: \" + message.payload));\n                break;\n            default:\n                this._raiseError(\"unhandled internal message \" + message.id);\n                break;\n        }\n    };\n    RpcProvider.prototype._transactionTimeout = function (transaction) {\n        transaction.reject('transaction timed out');\n        this._raiseError(\"transaction \" + transaction.id + \" timed out\");\n        delete this._pendingTransactions[transaction.id];\n        return;\n    };\n    RpcProvider.prototype._clearTransaction = function (transaction) {\n        if (typeof (transaction.timeoutHandle) !== 'undefined') {\n            clearTimeout(transaction.timeoutHandle);\n        }\n        delete this._pendingTransactions[transaction.id];\n    };\n    return RpcProvider;\n}());\nvar RpcProvider;\n(function (RpcProvider) {\n    (function (MessageType) {\n        MessageType[MessageType[\"signal\"] = 0] = \"signal\";\n        MessageType[MessageType[\"rpc\"] = 1] = \"rpc\";\n        MessageType[MessageType[\"internal\"] = 2] = \"internal\";\n    })(RpcProvider.MessageType || (RpcProvider.MessageType = {}));\n    var MessageType = RpcProvider.MessageType;\n    ;\n})(RpcProvider || (RpcProvider = {}));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = RpcProvider;\n",
    "\"use strict\";\nvar RpcProvider_1 = require('./RpcProvider');\nexports.RpcProvider = RpcProvider_1.default;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {Event} from 'microevent.ts';\n\nimport PoolMember from './PoolMember';\nimport PoolInterface from './PoolInterface';\n\nclass Pool<T> implements PoolInterface<T> {\n\n    constructor(\n        private _factory: Pool.FactoryInterface<T>\n    ) {}\n\n    get(): PoolMember<T> {\n        let member: PoolMember<T>;\n\n        if (this._poolSize === 0) {\n            const newItem = this._factory();\n\n            member = newItem && new PoolMember<T>(\n                newItem,\n                (victim: PoolMember<T>) => this._releaseMember(victim),\n                (victim: PoolMember<T>) => this._disposeMember(victim)\n            );\n        } else {\n            member = this._pool[--this._poolSize];\n            member._isAvailable = false;\n        }\n\n        return member;\n    }\n\n    private _releaseMember(victim: PoolMember<T>) {\n        if (victim._isAvailable) {\n            throw new Error('Trying to release an already released pool member');\n        }\n\n        if (victim._isDisposed) {\n            throw new Error('Trying to release an already disposed pool member');\n        }\n\n        const position = this._poolSize++;\n\n        this._pool[position] = victim;\n\n        victim._isAvailable = true;\n        victim._poolPosition = position;\n\n        this.event.release.dispatch(victim.get());\n    }\n\n    private _disposeMember(victim: PoolMember<T>) {\n        if (victim._isDisposed) {\n            throw new Error('Trying to dispose of an already disposed pool member');\n        }\n\n        if (victim._isAvailable) {\n            if (this._poolSize > 1) {\n                this._pool[victim._poolPosition] = this._pool[this._poolSize - 1];\n            }\n\n            this._poolSize--;\n        }\n\n        victim._isDisposed = true;\n\n        this.event.dispose.dispatch(victim.get());\n    }\n\n    event = {\n        release: new Event<T>(),\n        dispose: new Event<T>()\n    };\n\n    private _pool: Array<PoolMember<T> > = [];\n\n    private _poolSize = 0;\n}\n\nnamespace Pool {\n    export interface FactoryInterface<T> {\n        (): T;\n    }\n\n    export interface RecycleCallbackInterface<T> {\n        (value: T): void;\n    }\n\n    export interface DisposeCallbackInterface<T> {\n        (value: T): void;\n    }\n}\n\nexport default Pool;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport PoolMemberInterface from './PoolMemberInterface';\n\nclass PoolMember<T> implements PoolMemberInterface<T> {\n\n    constructor(\n        private _value: T,\n        private _releaseCB: (victim: PoolMember<T>) => void,\n        private _disposeCB: (victim: PoolMember<T>) => void\n    ) {}\n\n    adopt(target: T): void {\n        this._value = target;\n    }\n\n    get(): T {\n        return this._value;\n    }\n\n    release(): void {\n        this._releaseCB(this);\n    }\n\n    dispose(): void {\n        this._disposeCB(this);\n    }\n\n    public _isAvailable = false;\n    public _isDisposed = false;\n    public _poolPosition: number;\n}\n\nexport default PoolMember;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {Event} from 'microevent.ts';\n\nimport ProcessorInterface from './ProcessorInterface';\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\n\nclass FrameMergeProcessor implements ProcessorInterface {\n\n    init(width: number, height: number) {\n        this.flush();\n\n        this._width = width;\n        this._height = height;\n    }\n\n    flush(): void {\n        for (let i = 0; i < this._nFramesOnHold; i++) {\n            this._framesOnHold[i].release();\n            this._framesOnHold[i] = null;\n        }\n\n        this._nFramesOnHold = 0;\n    }\n\n    processSurface(wrappedSurface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        const surface = wrappedSurface.get();\n\n        if (surface.getHeight() !== this._height || surface.getWidth() !== this._width) {\n            throw new Error('surface dimensions do not match');\n        }\n\n        this._framesOnHold[this._nFramesOnHold++] = wrappedSurface;\n\n        if (this._nFramesOnHold === 2) {\n            this._process();\n        }\n    }\n\n    private _process(): void {\n        const buffer0 = this._framesOnHold[0].get().getBuffer(),\n            buffer1 = this._framesOnHold[1].get().getBuffer();\n\n        for (let i = 0; i < this._width * this._height; i++) {\n            buffer0[i] =\n                0xFF000000                                                               |\n                ((((buffer0[i] & 0xFF0000) + (buffer1[i] & 0xFF0000)) >>> 1) & 0xFF0000) |\n                ((((buffer0[i] & 0xFF00) + (buffer1[i] & 0xFF00)) >>> 1) & 0xFF00)       |\n                ((((buffer0[i] & 0xFF) + (buffer1[i] & 0xFF)) >>> 1) & 0xFF);\n        }\n\n        this.emit.dispatch(this._framesOnHold[0]);\n        this._framesOnHold[1].release();\n\n        this._nFramesOnHold = 0;\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n\n    private _framesOnHold = new Array<PoolMemberInterface<RGBASurfaceInterface>>(2);\n    private _nFramesOnHold = 0;\n\n    private _width = 0;\n    private _height = 0;\n\n}\n\nexport default FrameMergeProcessor;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {Event} from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\n\nclass PassthroughProcessor implements ProcessorInterface {\n\n    init(): void {}\n\n    flush(): void {}\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this.emit.dispatch(surface);\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n\n}\n\nexport default PassthroughProcessor;\n",
    "import ProcessorInterface from './ProcessorInterface';\nimport * as Config from './config';\n\nimport PassthroughProcessor from './PassthroughProcessor';\nimport FrameMergeProcessor from './FrameMergeProcessor';\n\nclass ProcessorFactory {\n\n    create(config: Config.ProcessorConfig): ProcessorInterface {\n        switch (config.type) {\n            case Config.Type.passthrough:\n                return new PassthroughProcessor();\n\n            case Config.Type.merge:\n                return new FrameMergeProcessor();\n\n            default:\n                throw new Error('cannot happen: invalid processor type');\n        }\n    }\n\n}\n\nexport default ProcessorFactory;\n",
    "import {EventInterface} from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\nimport ProcessorFactory from './ProcessorFactory';\nimport {ProcessorConfig, Type} from './config';\n\nclass ProcessorPipeline implements ProcessorInterface {\n\n    constructor(config?: Array<ProcessorConfig>) {\n        if (!config || config.length === 0) {\n            config = [{type: Type.passthrough}];\n        }\n\n        const factory = new ProcessorFactory();\n\n        this._processors = config.map(cfg => factory.create(cfg));\n\n        for (let i = 1; i < this._processors.length; i++) {\n            this._processors[i - 1].emit.addHandler(surface => this._processors[i].processSurface(surface));\n        }\n\n        this.emit = this._processors[this._processors.length - 1].emit;\n    }\n\n    init(width: number, height: number): void {\n        this._processors.forEach(prc => prc.init(width, height));\n    }\n\n    flush(): void {\n        this._processors.forEach(prc => prc.flush());\n    }\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this._processors[0].processSurface(surface);\n    }\n\n    emit: EventInterface<PoolMemberInterface<RGBASurfaceInterface>>;\n\n    private _processors: Array<ProcessorInterface>;\n\n}\n\nexport default ProcessorPipeline;\n",
    "export const enum Type {\n    passthrough,\n    merge\n}\n\nexport interface ProcessorConfig {\n    type: Type;\n}\n\nexport interface PassthroughProcessorConfig extends ProcessorConfig {\n    type: Type.passthrough;\n}\n\nexport interface FrameMergeProcessorConfig extends ProcessorConfig {\n    type: Type.merge;\n}\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {RpcProviderInterface} from 'worker-rpc';\n\nimport ArrayBufferSurface from '../../surface/ArrayBufferSurface';\nimport Pool from '../../../tools/pool/Pool';\nimport PoolMemberInterface from '../../../tools/pool/PoolMemberInterface';\nimport * as messages from './messages';\nimport ProcessorPipeline from '../ProcessorPipeline';\n\nclass PipelineHost {\n\n    constructor(\n        private _rpc: RpcProviderInterface\n    ) {\n        this._rpc\n            .registerRpcHandler(messages.messageIds.configure, this._onConfigure.bind(this))\n            .registerRpcHandler(messages.messageIds.flush, this._onFlush.bind(this))\n            .registerSignalHandler(messages.messageIds.process, this._onProcess.bind(this));\n\n        this._surfacePool.event.release.addHandler(PipelineHost._onReleaseSurface, this);\n    }\n\n    private static _onReleaseSurface(surface: ArrayBufferSurface, self: PipelineHost): void {\n        const buffer = surface.getUnderlyingBuffer();\n\n        if (!buffer) {\n            return;\n        }\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(messages.messageIds.release, {\n            id,\n            buffer\n        } as messages.ReleaseMessage, [buffer]);\n    }\n\n    private static _onEmitSurface(managedSurface: PoolMemberInterface<ArrayBufferSurface>, self: PipelineHost): void {\n        const buffer = managedSurface.get().getUnderlyingBuffer();\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(messages.messageIds.emit, {\n            id,\n            buffer\n        } as messages.EmitMessage, [buffer]);\n\n        managedSurface.get().resetUnderlyingBuffer();\n        managedSurface.release();\n    }\n\n    private _onConfigure(msg: messages.ConfigureMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n            this._pipeline.emit.removeHandler(PipelineHost._onEmitSurface, this);\n        }\n\n        this._pipeline = new ProcessorPipeline(msg.config);\n        this._pipeline.init(msg.width, msg.height);\n        this._pipeline.emit.addHandler(PipelineHost._onEmitSurface, this);\n    }\n\n    private _onFlush(msg: messages.FlushMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n        }\n    }\n\n    private _onProcess(msg: messages.ProcessMessage): void {\n        if (!this._pipeline) {\n            return;\n        }\n\n        this._bufferIds.set(msg.buffer, msg.id);\n\n        const managedSurface = this._surfacePool.get();\n        managedSurface.get().replaceUnderlyingBuffer(msg.width, msg.height, msg.buffer);\n\n        this._pipeline.processSurface(managedSurface);\n    }\n\n    private _pipeline: ProcessorPipeline = null;\n    private _surfacePool = new Pool<ArrayBufferSurface>(() => new ArrayBufferSurface());\n    private _bufferIds = new WeakMap<ArrayBuffer, number>();\n\n}\n\nexport default PipelineHost;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {ProcessorConfig} from '../config';\n\nexport const messageIds = {\n    configure: 'pipeline/configure',\n    flush: 'pipeline/flush',\n    process: 'pipeline/process',\n    emit: 'pipeline/emit',\n    release: 'pipeline/release'\n};\nObject.freeze(messageIds);\n\nexport interface ConfigureMessage {\n    width: number;\n    height: number;\n    config: Array<ProcessorConfig>;\n}\n\nexport interface FlushMessage {}\n\nexport interface ProcessMessage {\n    id: number;\n    buffer: ArrayBuffer;\n    width: number;\n    height: number;\n}\n\nexport interface EmitMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n\nexport interface ReleaseMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport RGBASurfaceInterface from './RGBASurfaceInterface';\n\nclass ArrayBufferSurface implements RGBASurfaceInterface {\n\n    static createFromArrayBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        return (new ArrayBufferSurface()).replaceUnderlyingBuffer(width, height, buffer);\n    }\n\n    replaceUnderlyingBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        if (width * height * 4 !== buffer.byteLength) {\n            throw new Error('surface size mismatch');\n        }\n\n        this._width = width;\n        this._height = height;\n        this._underlyingBuffer = buffer;\n\n        this._buffer = new Uint32Array(this._underlyingBuffer);\n\n        return this;\n    }\n\n    getUnderlyingBuffer(): ArrayBuffer {\n        return this._underlyingBuffer;\n    }\n\n    resetUnderlyingBuffer(): ArrayBufferSurface {\n        this._width = this._height = 0;\n        this._underlyingBuffer = this._buffer = null;\n\n        return this;\n    }\n\n    getWidth(): number {\n        return this._width;\n    }\n\n    getHeight(): number {\n        return this._height;\n    }\n\n    getBuffer(): Uint32Array {\n        return this._buffer;\n    }\n\n    getByteOrder(): RGBASurfaceInterface.ByteOrder {\n        return RGBASurfaceInterface.ByteOrder.rgba;\n    }\n\n    fill(value: number): this {\n        for (let i = 0; i < this._buffer.length; i++) {\n            this._buffer[i] = value;\n        }\n\n        return this;\n    }\n\n    private _height = 0;\n    private _width = 0;\n    private _underlyingBuffer: ArrayBuffer;\n\n    private _buffer: Uint32Array = null;\n}\n\nexport default ArrayBufferSurface;\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport {getRpc} from '../rpc';\nimport PipelineHost from '../../../src/video/processing/worker/PipelineHost';\n\nexport const pipelineHost = new PipelineHost(getRpc());\n",
    "/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2016  Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\ndeclare function postMessage(message: any, transfer?: any): void;\n\nimport {RpcProviderInterface, RpcProvider} from 'worker-rpc';\n\nlet rpcProvider: RpcProvider = null,\n    port: MessagePort = null,\n    portPending: MessagePort = null;\n\nfunction send(message: any, transfer?: any): void {\n    if (port) {\n        port.postMessage(message, transfer);\n    } else {\n        postMessage(message, transfer);\n    }\n\n    if (portPending) {\n        port = portPending;\n        port.onmessage = (e: MessageEvent) => rpcProvider.dispatch(e.data);\n    }\n\n    portPending = null;\n}\n\nrpcProvider = new RpcProvider(send);\nrpcProvider.error.addHandler(e => {\n    console.log(e ? e.message : 'unknown rpc error');\n});\nonmessage = (e: MessageEvent) => port || rpcProvider.dispatch(e.data);\n\nrpcProvider.registerRpcHandler('/use-port', (newPort: MessagePort) => {\n    if (!(port || portPending)) {\n        portPending = newPort;\n        return Promise.resolve();\n    } else {\n        return Promise.reject('RPC already switched to message port');\n    }\n});\n\nexport function getRpc(): RpcProviderInterface {\n    return rpcProvider;\n}\n"
  ]
}