{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/microevent.ts/lib/Event.js","node_modules/microevent.ts/lib/index.js","node_modules/worker-rpc/lib/RpcProvider.js","node_modules/worker-rpc/lib/index.js","src/tools/pool/Pool.ts","src/tools/pool/PoolMember.ts","src/video/processing/FrameMergeProcessor.ts","src/video/processing/PassthroughProcessor.ts","src/video/processing/ProcessorFactory.ts","src/video/processing/ProcessorPipeline.ts","src/video/processing/worker/PipelineHost.ts","src/video/processing/worker/messages.ts","src/video/surface/ArrayBufferSurface.ts","worker/src/main/video-pipeline.ts","worker/src/rpc.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","factories","callback","context","payload","getFactory","handlerCount","src","argsHandlers","argsContexts","push","Function","bind","apply","concat","compileFactory","Event","this","hasHandlers","_handlers","_contexts","_createDispatcher","prototype","addHandler","handler","isHandlerAttached","_updateHasHandlers","removeHandler","idx","_getHandlerIndex","splice","undefined","dispatch","Object","defineProperty","value","default","Event_1","RpcProvider","microevent_ts_1","MessageType","_dispatch","_rpcTimeout","error","_rpcHandlers","_signalHandlers","_pendingTransactions","_nextTransactionId","message","type","signal","_handleSignal","rpc","_handeRpc","internal","_handleInternal","_raiseError","id","transfer","_this","transactionId","Promise","resolve","reject","transaction","timeoutHandle","setTimeout","_transactionTimeout","registerRpcHandler","registerSignalHandler","deregisterRpcHandler","deregisterSignalHandler","filter","h","forEach","then","result","reason","_clearTransaction","clearTimeout","RpcProvider_1","PoolMember_1","Pool","_factory","event","release","dispose","_pool","_poolSize","get","member","newItem","victim","_releaseMember","_disposeMember","_isAvailable","_isDisposed","position","_poolPosition","PoolMember","_value","_releaseCB","_disposeCB","adopt","target","FrameMergeProcessor","emit","_framesOnHold","Array","_nFramesOnHold","_width","_height","init","width","height","flush","processSurface","wrappedSurface","surface","getHeight","getWidth","_process","buffer0","getBuffer","buffer1","PassthroughProcessor","PassthroughProcessor_1","FrameMergeProcessor_1","ProcessorFactory","create","config","ProcessorFactory_1","ProcessorPipeline","factory","_processors","map","cfg","this_1","prc","ArrayBufferSurface_1","Pool_1","messages","ProcessorPipeline_1","PipelineHost","_rpc","_pipeline","_surfacePool","_bufferIds","WeakMap","messageIds","configure","_onConfigure","_onFlush","process","_onProcess","_onReleaseSurface","self","buffer","getUnderlyingBuffer","has","delete","_onEmitSurface","managedSurface","resetUnderlyingBuffer","msg","set","replaceUnderlyingBuffer","freeze","ArrayBufferSurface","_buffer","createFromArrayBuffer","byteLength","_underlyingBuffer","Uint32Array","getByteOrder","fill","rpc_1","PipelineHost_1","pipelineHost","getRpc","worker_rpc_1","rpcProvider","port","portPending","postMessage","onmessage","data","console","log","newPort"],"mappings":"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","file":"video-pipeline.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\nvar factories = [];\nfactories[0] = function () {\n    return function dispatcher0() { };\n};\nfactories[1] = function (callback, context) {\n    if (typeof (context) === 'undefined')\n        return callback;\n    return function dispatcher1(payload) {\n        callback(payload, context);\n    };\n};\nfunction getFactory(handlerCount) {\n    if (!factories[handlerCount])\n        factories[handlerCount] = compileFactory(handlerCount);\n    return factories[handlerCount];\n}\nfunction compileFactory(handlerCount) {\n    var src = 'return function dispatcher' + handlerCount + '(payload) {\\n';\n    var argsHandlers = [], argsContexts = [];\n    for (var i = 0; i < handlerCount; i++) {\n        argsHandlers.push('cb' + i);\n        argsContexts.push('ctx' + i);\n        src += '    cb' + i + '(payload, ctx' + i + ');\\n';\n    }\n    src += '};';\n    return new (Function.bind.apply(Function, [void 0].concat(argsHandlers.concat(argsContexts), [src])))();\n}\nvar Event = (function () {\n    function Event() {\n        this.hasHandlers = false;\n        this._handlers = [];\n        this._contexts = [];\n        this._createDispatcher();\n    }\n    Event.prototype.addHandler = function (handler, context) {\n        if (!this.isHandlerAttached(handler, context)) {\n            this._handlers.push(handler);\n            this._contexts.push(context);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.removeHandler = function (handler, context) {\n        var idx = this._getHandlerIndex(handler, context);\n        if (typeof (idx) !== 'undefined') {\n            this._handlers.splice(idx, 1);\n            this._contexts.splice(idx, 1);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.isHandlerAttached = function (handler, context) {\n        return typeof (this._getHandlerIndex(handler, context)) !== 'undefined';\n    };\n    Event.prototype._updateHasHandlers = function () {\n        this.hasHandlers = !!this._handlers.length;\n    };\n    Event.prototype._getHandlerIndex = function (handler, context) {\n        var handlerCount = this._handlers.length;\n        var idx;\n        for (idx = 0; idx < handlerCount; idx++) {\n            if (this._handlers[idx] === handler && this._contexts[idx] === context)\n                break;\n        }\n        return idx < handlerCount ? idx : undefined;\n    };\n    Event.prototype._createDispatcher = function () {\n        this.dispatch = getFactory(this._handlers.length).apply(this, this._handlers.concat(this._contexts));\n    };\n    return Event;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Event;\n","\"use strict\";\nvar Event_1 = require('./Event');\nexports.Event = Event_1.default;\n","\"use strict\";\nvar microevent_ts_1 = require('microevent.ts');\nvar MSG_RESOLVE_TRANSACTION = \"resolve_transaction\", MSG_REJECT_TRANSACTION = \"reject_transaction\", MSG_ERROR = \"error\";\nvar RpcProvider = (function () {\n    function RpcProvider(_dispatch, _rpcTimeout) {\n        if (_rpcTimeout === void 0) { _rpcTimeout = 0; }\n        this._dispatch = _dispatch;\n        this._rpcTimeout = _rpcTimeout;\n        this.error = new microevent_ts_1.Event();\n        this._rpcHandlers = {};\n        this._signalHandlers = {};\n        this._pendingTransactions = {};\n        this._nextTransactionId = 0;\n    }\n    RpcProvider.prototype.dispatch = function (payload) {\n        var message = payload;\n        switch (message.type) {\n            case RpcProvider.MessageType.signal:\n                return this._handleSignal(message);\n            case RpcProvider.MessageType.rpc:\n                return this._handeRpc(message);\n            case RpcProvider.MessageType.internal:\n                return this._handleInternal(message);\n            default:\n                this._raiseError(\"invalid message type \" + message.type);\n        }\n    };\n    RpcProvider.prototype.rpc = function (id, payload, transfer) {\n        var _this = this;\n        var transactionId = this._nextTransactionId++;\n        this._dispatch({\n            type: RpcProvider.MessageType.rpc,\n            transactionId: transactionId,\n            id: id,\n            payload: payload\n        }, transfer ? transfer : undefined);\n        return new Promise(function (resolve, reject) {\n            var transaction = _this._pendingTransactions[transactionId] = {\n                id: transactionId,\n                resolve: resolve,\n                reject: reject\n            };\n            if (_this._rpcTimeout > 0) {\n                _this._pendingTransactions[transactionId].timeoutHandle =\n                    setTimeout(function () { return _this._transactionTimeout(transaction); }, _this._rpcTimeout);\n            }\n        });\n    };\n    ;\n    RpcProvider.prototype.signal = function (id, payload, transfer) {\n        this._dispatch({\n            type: RpcProvider.MessageType.signal,\n            id: id,\n            payload: payload,\n        }, transfer ? transfer : undefined);\n        return this;\n    };\n    RpcProvider.prototype.registerRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            throw new Error(\"rpc handler for \" + id + \" already registered\");\n        }\n        this._rpcHandlers[id] = handler;\n        return this;\n    };\n    ;\n    RpcProvider.prototype.registerSignalHandler = function (id, handler) {\n        if (!this._signalHandlers[id]) {\n            this._signalHandlers[id] = [];\n        }\n        this._signalHandlers[id].push(handler);\n        return this;\n    };\n    RpcProvider.prototype.deregisterRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            delete this._rpcHandlers[id];\n        }\n        return this;\n    };\n    ;\n    RpcProvider.prototype.deregisterSignalHandler = function (id, handler) {\n        if (this._signalHandlers[id]) {\n            this._signalHandlers[id] = this._signalHandlers[id].filter(function (h) { return handler !== h; });\n        }\n        return this;\n    };\n    RpcProvider.prototype._raiseError = function (error) {\n        this.error.dispatch(new Error(error));\n        this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_ERROR,\n            payload: error\n        });\n    };\n    RpcProvider.prototype._handleSignal = function (message) {\n        if (!this._signalHandlers[message.id]) {\n            return this._raiseError(\"invalid signal \" + message.id);\n        }\n        this._signalHandlers[message.id].forEach(function (handler) { return handler(message.payload); });\n    };\n    RpcProvider.prototype._handeRpc = function (message) {\n        var _this = this;\n        if (!this._rpcHandlers[message.id]) {\n            return this._raiseError(\"invalid rpc \" + message.id);\n        }\n        Promise.resolve(this._rpcHandlers[message.id](message.payload))\n            .then(function (result) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_RESOLVE_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: result\n        }); }, function (reason) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_REJECT_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: reason\n        }); });\n    };\n    RpcProvider.prototype._handleInternal = function (message) {\n        switch (message.id) {\n            case MSG_RESOLVE_TRANSACTION:\n                if (!this._pendingTransactions[message.transactionId]) {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                this._pendingTransactions[message.transactionId].resolve(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_REJECT_TRANSACTION:\n                if (!this._pendingTransactions[message.transactionId]) {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                this._pendingTransactions[message.transactionId].reject(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_ERROR:\n                this.error.dispatch(new Error(\"remote error: \" + message.payload));\n                break;\n            default:\n                this._raiseError(\"unhandled internal message \" + message.id);\n                break;\n        }\n    };\n    RpcProvider.prototype._transactionTimeout = function (transaction) {\n        transaction.reject('transaction timed out');\n        this._raiseError(\"transaction \" + transaction.id + \" timed out\");\n        delete this._pendingTransactions[transaction.id];\n        return;\n    };\n    RpcProvider.prototype._clearTransaction = function (transaction) {\n        if (typeof (transaction.timeoutHandle) !== 'undefined') {\n            clearTimeout(transaction.timeoutHandle);\n        }\n        delete this._pendingTransactions[transaction.id];\n    };\n    return RpcProvider;\n}());\nvar RpcProvider;\n(function (RpcProvider) {\n    (function (MessageType) {\n        MessageType[MessageType[\"signal\"] = 0] = \"signal\";\n        MessageType[MessageType[\"rpc\"] = 1] = \"rpc\";\n        MessageType[MessageType[\"internal\"] = 2] = \"internal\";\n    })(RpcProvider.MessageType || (RpcProvider.MessageType = {}));\n    var MessageType = RpcProvider.MessageType;\n    ;\n})(RpcProvider || (RpcProvider = {}));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = RpcProvider;\n","\"use strict\";\nvar RpcProvider_1 = require('./RpcProvider');\nexports.RpcProvider = RpcProvider_1.default;\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport PoolMember from './PoolMember';\nimport PoolInterface from './PoolInterface';\n\nclass Pool<T> implements PoolInterface<T> {\n    constructor(private _factory: Pool.FactoryInterface<T>) {}\n\n    get(): PoolMember<T> {\n        let member: PoolMember<T>;\n\n        if (this._poolSize === 0) {\n            const newItem = this._factory();\n\n            member = new PoolMember<T>(\n                newItem,\n                (victim: PoolMember<T>) => this._releaseMember(victim),\n                (victim: PoolMember<T>) => this._disposeMember(victim)\n            );\n        } else {\n            member = this._pool[--this._poolSize];\n            member._isAvailable = false;\n        }\n\n        return member;\n    }\n\n    private _releaseMember(victim: PoolMember<T>) {\n        if (victim._isAvailable) {\n            throw new Error('Trying to release an already released pool member');\n        }\n\n        if (victim._isDisposed) {\n            throw new Error('Trying to release an already disposed pool member');\n        }\n\n        const position = this._poolSize++;\n\n        this._pool[position] = victim;\n\n        victim._isAvailable = true;\n        victim._poolPosition = position;\n\n        this.event.release.dispatch(victim.get());\n    }\n\n    private _disposeMember(victim: PoolMember<T>) {\n        if (victim._isDisposed) {\n            throw new Error('Trying to dispose of an already disposed pool member');\n        }\n\n        if (victim._isAvailable) {\n            if (this._poolSize > 1) {\n                this._pool[victim._poolPosition] = this._pool[this._poolSize - 1];\n            }\n\n            this._poolSize--;\n        }\n\n        victim._isDisposed = true;\n\n        this.event.dispose.dispatch(victim.get());\n    }\n\n    event = {\n        release: new Event<T>(),\n        dispose: new Event<T>()\n    };\n\n    private _pool: Array<PoolMember<T>> = [];\n\n    private _poolSize = 0;\n}\n\nnamespace Pool {\n    export interface FactoryInterface<T> {\n        (): T;\n    }\n\n    export interface RecycleCallbackInterface<T> {\n        (value: T): void;\n    }\n\n    export interface DisposeCallbackInterface<T> {\n        (value: T): void;\n    }\n}\n\nexport { Pool as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport PoolMemberInterface from './PoolMemberInterface';\n\nclass PoolMember<T> implements PoolMemberInterface<T> {\n    constructor(\n        private _value: T,\n        private _releaseCB: (victim: PoolMember<T>) => void,\n        private _disposeCB: (victim: PoolMember<T>) => void\n    ) {}\n\n    adopt(target: T): void {\n        this._value = target;\n    }\n\n    get(): T {\n        return this._value;\n    }\n\n    release(): void {\n        this._releaseCB(this);\n    }\n\n    dispose(): void {\n        this._disposeCB(this);\n    }\n\n    public _isAvailable = false;\n    public _isDisposed = false;\n    public _poolPosition: number;\n}\n\nexport { PoolMember as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport ProcessorInterface from './ProcessorInterface';\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\n\nclass FrameMergeProcessor implements ProcessorInterface {\n    init(width: number, height: number) {\n        this.flush();\n\n        this._width = width;\n        this._height = height;\n    }\n\n    flush(): void {\n        for (let i = 0; i < this._nFramesOnHold; i++) {\n            this._framesOnHold[i].release();\n            this._framesOnHold[i] = null;\n        }\n\n        this._nFramesOnHold = 0;\n    }\n\n    processSurface(wrappedSurface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        const surface = wrappedSurface.get();\n\n        if (surface.getHeight() !== this._height || surface.getWidth() !== this._width) {\n            throw new Error('surface dimensions do not match');\n        }\n\n        this._framesOnHold[this._nFramesOnHold++] = wrappedSurface;\n\n        if (this._nFramesOnHold === 2) {\n            this._process();\n        }\n    }\n\n    private _process(): void {\n        const buffer0 = this._framesOnHold[0].get().getBuffer(),\n            buffer1 = this._framesOnHold[1].get().getBuffer();\n\n        for (let i = 0; i < this._width * this._height; i++) {\n            buffer0[i] =\n                0xff000000 |\n                ((((buffer0[i] & 0xff0000) + (buffer1[i] & 0xff0000)) >>> 1) & 0xff0000) |\n                ((((buffer0[i] & 0xff00) + (buffer1[i] & 0xff00)) >>> 1) & 0xff00) |\n                ((((buffer0[i] & 0xff) + (buffer1[i] & 0xff)) >>> 1) & 0xff);\n        }\n\n        this.emit.dispatch(this._framesOnHold[0]);\n        this._framesOnHold[1].release();\n\n        this._nFramesOnHold = 0;\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n\n    private _framesOnHold = new Array<PoolMemberInterface<RGBASurfaceInterface>>(2);\n    private _nFramesOnHold = 0;\n\n    private _width = 0;\n    private _height = 0;\n}\n\nexport { FrameMergeProcessor as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\n\nclass PassthroughProcessor implements ProcessorInterface {\n    init(): void {}\n\n    flush(): void {}\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this.emit.dispatch(surface);\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n}\n\nexport { PassthroughProcessor as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport ProcessorInterface from './ProcessorInterface';\nimport * as Config from './config';\n\nimport PassthroughProcessor from './PassthroughProcessor';\nimport FrameMergeProcessor from './FrameMergeProcessor';\n\nclass ProcessorFactory {\n    create(config: Config.ProcessorConfig): ProcessorInterface {\n        switch (config.type) {\n            case Config.Type.passthrough:\n                return new PassthroughProcessor();\n\n            case Config.Type.merge:\n                return new FrameMergeProcessor();\n\n            default:\n                throw new Error('cannot happen: invalid processor type');\n        }\n    }\n}\n\nexport { ProcessorFactory as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { EventInterface } from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\nimport ProcessorFactory from './ProcessorFactory';\nimport { ProcessorConfig, Type } from './config';\n\nclass ProcessorPipeline implements ProcessorInterface {\n    constructor(config?: Array<ProcessorConfig>) {\n        if (!config || config.length === 0) {\n            config = [{ type: Type.passthrough }];\n        }\n\n        const factory = new ProcessorFactory();\n\n        this._processors = config.map(cfg => factory.create(cfg));\n\n        for (let i = 1; i < this._processors.length; i++) {\n            this._processors[i - 1].emit.addHandler(surface => this._processors[i].processSurface(surface));\n        }\n\n        this.emit = this._processors[this._processors.length - 1].emit;\n    }\n\n    init(width: number, height: number): void {\n        this._processors.forEach(prc => prc.init(width, height));\n    }\n\n    flush(): void {\n        this._processors.forEach(prc => prc.flush());\n    }\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this._processors[0].processSurface(surface);\n    }\n\n    emit: EventInterface<PoolMemberInterface<RGBASurfaceInterface>>;\n\n    private _processors: Array<ProcessorInterface>;\n}\n\nexport { ProcessorPipeline as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { RpcProviderInterface } from 'worker-rpc';\n\nimport ArrayBufferSurface from '../../surface/ArrayBufferSurface';\nimport Pool from '../../../tools/pool/Pool';\nimport PoolMemberInterface from '../../../tools/pool/PoolMemberInterface';\nimport * as messages from './messages';\nimport ProcessorPipeline from '../ProcessorPipeline';\n\nclass PipelineHost {\n    constructor(private _rpc: RpcProviderInterface) {\n        this._rpc\n            .registerRpcHandler(messages.messageIds.configure, this._onConfigure.bind(this))\n            .registerRpcHandler(messages.messageIds.flush, this._onFlush.bind(this))\n            .registerSignalHandler(messages.messageIds.process, this._onProcess.bind(this));\n\n        this._surfacePool.event.release.addHandler(PipelineHost._onReleaseSurface, this);\n    }\n\n    private static _onReleaseSurface(surface: ArrayBufferSurface, self: PipelineHost): void {\n        const buffer = surface.getUnderlyingBuffer();\n\n        if (!buffer) {\n            return;\n        }\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(\n            messages.messageIds.release,\n            {\n                id,\n                buffer\n            } as messages.ReleaseMessage,\n            [buffer]\n        );\n    }\n\n    private static _onEmitSurface(managedSurface: PoolMemberInterface<ArrayBufferSurface>, self: PipelineHost): void {\n        const buffer = managedSurface.get().getUnderlyingBuffer();\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(\n            messages.messageIds.emit,\n            {\n                id,\n                buffer\n            } as messages.EmitMessage,\n            [buffer]\n        );\n\n        managedSurface.get().resetUnderlyingBuffer();\n        managedSurface.release();\n    }\n\n    private _onConfigure(msg: messages.ConfigureMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n            this._pipeline.emit.removeHandler(PipelineHost._onEmitSurface, this);\n        }\n\n        this._pipeline = new ProcessorPipeline(msg.config);\n        this._pipeline.init(msg.width, msg.height);\n        this._pipeline.emit.addHandler(PipelineHost._onEmitSurface, this);\n    }\n\n    private _onFlush(msg: messages.FlushMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n        }\n    }\n\n    private _onProcess(msg: messages.ProcessMessage): void {\n        if (!this._pipeline) {\n            return;\n        }\n\n        this._bufferIds.set(msg.buffer, msg.id);\n\n        const managedSurface = this._surfacePool.get();\n        managedSurface.get().replaceUnderlyingBuffer(msg.width, msg.height, msg.buffer);\n\n        this._pipeline.processSurface(managedSurface);\n    }\n\n    private _pipeline: ProcessorPipeline = null;\n    private _surfacePool = new Pool<ArrayBufferSurface>(() => new ArrayBufferSurface());\n    private _bufferIds = new WeakMap<ArrayBuffer, number>();\n}\n\nexport { PipelineHost as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { ProcessorConfig } from '../config';\n\nexport const messageIds = {\n    configure: 'pipeline/configure',\n    flush: 'pipeline/flush',\n    process: 'pipeline/process',\n    emit: 'pipeline/emit',\n    release: 'pipeline/release'\n};\nObject.freeze(messageIds);\n\nexport interface ConfigureMessage {\n    width: number;\n    height: number;\n    config: Array<ProcessorConfig>;\n}\n\nexport interface FlushMessage {}\n\nexport interface ProcessMessage {\n    id: number;\n    buffer: ArrayBuffer;\n    width: number;\n    height: number;\n}\n\nexport interface EmitMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n\nexport interface ReleaseMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport RGBASurfaceInterface from './RGBASurfaceInterface';\n\nclass ArrayBufferSurface implements RGBASurfaceInterface {\n    static createFromArrayBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        return new ArrayBufferSurface().replaceUnderlyingBuffer(width, height, buffer);\n    }\n\n    replaceUnderlyingBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        if (width * height * 4 !== buffer.byteLength) {\n            throw new Error('surface size mismatch');\n        }\n\n        this._width = width;\n        this._height = height;\n        this._underlyingBuffer = buffer;\n\n        this._buffer = new Uint32Array(this._underlyingBuffer);\n\n        return this;\n    }\n\n    getUnderlyingBuffer(): ArrayBuffer {\n        return this._underlyingBuffer;\n    }\n\n    resetUnderlyingBuffer(): ArrayBufferSurface {\n        this._width = this._height = 0;\n        this._underlyingBuffer = this._buffer = null;\n\n        return this;\n    }\n\n    getWidth(): number {\n        return this._width;\n    }\n\n    getHeight(): number {\n        return this._height;\n    }\n\n    getBuffer(): Uint32Array {\n        return this._buffer;\n    }\n\n    getByteOrder(): RGBASurfaceInterface.ByteOrder {\n        return RGBASurfaceInterface.ByteOrder.rgba;\n    }\n\n    fill(value: number): this {\n        for (let i = 0; i < this._buffer.length; i++) {\n            this._buffer[i] = value;\n        }\n\n        return this;\n    }\n\n    private _height = 0;\n    private _width = 0;\n    private _underlyingBuffer: ArrayBuffer;\n\n    private _buffer: Uint32Array = null;\n}\n\nexport { ArrayBufferSurface as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { getRpc } from '../rpc';\nimport PipelineHost from '../../../src/video/processing/worker/PipelineHost';\n\nexport const pipelineHost = new PipelineHost(getRpc());\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\ndeclare function postMessage(message: any, transfer?: any): void;\n\nimport { RpcProviderInterface, RpcProvider } from 'worker-rpc';\n\nlet rpcProvider: RpcProvider = null,\n    port: MessagePort = null,\n    portPending: MessagePort = null;\n\nfunction send(message: any, transfer?: any): void {\n    if (port) {\n        port.postMessage(message, transfer);\n    } else {\n        postMessage(message, transfer);\n    }\n\n    if (portPending) {\n        port = portPending;\n        port.onmessage = (e: MessageEvent) => rpcProvider.dispatch(e.data);\n    }\n\n    portPending = null;\n}\n\nrpcProvider = new RpcProvider(send);\nrpcProvider.error.addHandler(e => {\n    console.log(e ? e.message : 'unknown rpc error');\n});\nonmessage = (e: MessageEvent) => port || rpcProvider.dispatch(e.data);\n\nrpcProvider.registerRpcHandler('/use-port', (newPort: MessagePort) => {\n    if (!(port || portPending)) {\n        portPending = newPort;\n        return Promise.resolve();\n    } else {\n        return Promise.reject('RPC already switched to message port');\n    }\n});\n\nexport function getRpc(): RpcProviderInterface {\n    return rpcProvider;\n}\n"]}