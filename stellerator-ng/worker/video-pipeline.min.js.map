{"version":3,"file":"video-pipeline.min.js","sources":["../../node_modules/microevent.ts/lib/Event.js","../../node_modules/microevent.ts/lib/index.js","../../node_modules/worker-rpc/lib/RpcProvider.js","../../node_modules/worker-rpc/lib/index.js","../../worker/src/rpc.ts","../../src/video/surface/ArrayBufferSurface.ts","../../src/tools/pool/PoolMember.ts","../../src/tools/pool/Pool.ts","../../src/video/processing/worker/messages.ts","../../src/video/processing/PassthroughProcessor.ts","../../src/video/processing/FrameMergeProcessor.ts","../../src/video/processing/ProcessorFactory.ts","../../src/video/processing/ProcessorPipeline.ts","../../src/video/processing/worker/PipelineHost.ts","../../worker/src/main/video-pipeline.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar factories = [];\nfactories[0] = function () {\n    return function dispatcher0() { };\n};\nfactories[1] = function (callback, context) {\n    if (typeof (context) === 'undefined')\n        return callback;\n    return function dispatcher1(payload) {\n        callback(payload, context);\n    };\n};\nfunction getFactory(handlerCount) {\n    if (!factories[handlerCount])\n        factories[handlerCount] = compileFactory(handlerCount);\n    return factories[handlerCount];\n}\nfunction compileFactory(handlerCount) {\n    var src = 'return function dispatcher' + handlerCount + '(payload) {\\n';\n    var argsHandlers = [], argsContexts = [];\n    for (var i = 0; i < handlerCount; i++) {\n        argsHandlers.push('cb' + i);\n        argsContexts.push('ctx' + i);\n        src += '    cb' + i + '(payload, ctx' + i + ');\\n';\n    }\n    src += '};';\n    return new (Function.bind.apply(Function, [void 0].concat(argsHandlers.concat(argsContexts), [src])))();\n}\nvar Event = /** @class */ (function () {\n    function Event() {\n        this.hasHandlers = false;\n        this._handlers = [];\n        this._contexts = [];\n        this._createDispatcher();\n    }\n    Event.prototype.addHandler = function (handler, context) {\n        if (!this.isHandlerAttached(handler, context)) {\n            this._handlers.push(handler);\n            this._contexts.push(context);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.removeHandler = function (handler, context) {\n        var idx = this._getHandlerIndex(handler, context);\n        if (typeof (idx) !== 'undefined') {\n            this._handlers.splice(idx, 1);\n            this._contexts.splice(idx, 1);\n            this._createDispatcher();\n            this._updateHasHandlers();\n        }\n        return this;\n    };\n    Event.prototype.isHandlerAttached = function (handler, context) {\n        return typeof (this._getHandlerIndex(handler, context)) !== 'undefined';\n    };\n    Event.prototype._updateHasHandlers = function () {\n        this.hasHandlers = !!this._handlers.length;\n    };\n    Event.prototype._getHandlerIndex = function (handler, context) {\n        var handlerCount = this._handlers.length;\n        var idx;\n        for (idx = 0; idx < handlerCount; idx++) {\n            if (this._handlers[idx] === handler && this._contexts[idx] === context)\n                break;\n        }\n        return idx < handlerCount ? idx : undefined;\n    };\n    Event.prototype._createDispatcher = function () {\n        this.dispatch = getFactory(this._handlers.length).apply(this, this._handlers.concat(this._contexts));\n    };\n    return Event;\n}());\nexports.default = Event;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Event_1 = require(\"./Event\");\nexports.Event = Event_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar microevent_ts_1 = require(\"microevent.ts\");\nvar MSG_RESOLVE_TRANSACTION = \"resolve_transaction\", MSG_REJECT_TRANSACTION = \"reject_transaction\", MSG_ERROR = \"error\";\nvar RpcProvider = /** @class */ (function () {\n    function RpcProvider(_dispatch, _rpcTimeout) {\n        if (_rpcTimeout === void 0) { _rpcTimeout = 0; }\n        this._dispatch = _dispatch;\n        this._rpcTimeout = _rpcTimeout;\n        this.error = new microevent_ts_1.Event();\n        this._rpcHandlers = {};\n        this._signalHandlers = {};\n        this._pendingTransactions = {};\n        this._nextTransactionId = 0;\n    }\n    RpcProvider.prototype.dispatch = function (payload) {\n        var message = payload;\n        switch (message.type) {\n            case RpcProvider.MessageType.signal:\n                return this._handleSignal(message);\n            case RpcProvider.MessageType.rpc:\n                return this._handeRpc(message);\n            case RpcProvider.MessageType.internal:\n                return this._handleInternal(message);\n            default:\n                this._raiseError(\"invalid message type \" + message.type);\n        }\n    };\n    RpcProvider.prototype.rpc = function (id, payload, transfer) {\n        var _this = this;\n        var transactionId = this._nextTransactionId++;\n        this._dispatch({\n            type: RpcProvider.MessageType.rpc,\n            transactionId: transactionId,\n            id: id,\n            payload: payload\n        }, transfer ? transfer : undefined);\n        return new Promise(function (resolve, reject) {\n            var transaction = _this._pendingTransactions[transactionId] = {\n                id: transactionId,\n                resolve: resolve,\n                reject: reject\n            };\n            if (_this._rpcTimeout > 0) {\n                _this._pendingTransactions[transactionId].timeoutHandle =\n                    setTimeout(function () { return _this._transactionTimeout(transaction); }, _this._rpcTimeout);\n            }\n        });\n    };\n    ;\n    RpcProvider.prototype.signal = function (id, payload, transfer) {\n        this._dispatch({\n            type: RpcProvider.MessageType.signal,\n            id: id,\n            payload: payload,\n        }, transfer ? transfer : undefined);\n        return this;\n    };\n    RpcProvider.prototype.registerRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            throw new Error(\"rpc handler for \" + id + \" already registered\");\n        }\n        this._rpcHandlers[id] = handler;\n        return this;\n    };\n    ;\n    RpcProvider.prototype.registerSignalHandler = function (id, handler) {\n        if (!this._signalHandlers[id]) {\n            this._signalHandlers[id] = [];\n        }\n        this._signalHandlers[id].push(handler);\n        return this;\n    };\n    RpcProvider.prototype.deregisterRpcHandler = function (id, handler) {\n        if (this._rpcHandlers[id]) {\n            delete this._rpcHandlers[id];\n        }\n        return this;\n    };\n    ;\n    RpcProvider.prototype.deregisterSignalHandler = function (id, handler) {\n        if (this._signalHandlers[id]) {\n            this._signalHandlers[id] = this._signalHandlers[id].filter(function (h) { return handler !== h; });\n        }\n        return this;\n    };\n    RpcProvider.prototype._raiseError = function (error) {\n        this.error.dispatch(new Error(error));\n        this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_ERROR,\n            payload: error\n        });\n    };\n    RpcProvider.prototype._handleSignal = function (message) {\n        if (!this._signalHandlers[message.id]) {\n            return this._raiseError(\"invalid signal \" + message.id);\n        }\n        this._signalHandlers[message.id].forEach(function (handler) { return handler(message.payload); });\n    };\n    RpcProvider.prototype._handeRpc = function (message) {\n        var _this = this;\n        if (!this._rpcHandlers[message.id]) {\n            return this._raiseError(\"invalid rpc \" + message.id);\n        }\n        Promise.resolve(this._rpcHandlers[message.id](message.payload))\n            .then(function (result) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_RESOLVE_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: result\n        }); }, function (reason) { return _this._dispatch({\n            type: RpcProvider.MessageType.internal,\n            id: MSG_REJECT_TRANSACTION,\n            transactionId: message.transactionId,\n            payload: reason\n        }); });\n    };\n    RpcProvider.prototype._handleInternal = function (message) {\n        var transaction = typeof (message.transactionId) !== 'undefined' ? this._pendingTransactions[message.transactionId] : undefined;\n        switch (message.id) {\n            case MSG_RESOLVE_TRANSACTION:\n                if (!transaction || typeof (message.transactionId) === 'undefined') {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                transaction.resolve(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_REJECT_TRANSACTION:\n                if (!transaction || typeof (message.transactionId) === 'undefined') {\n                    return this._raiseError(\"no pending transaction with id \" + message.transactionId);\n                }\n                this._pendingTransactions[message.transactionId].reject(message.payload);\n                this._clearTransaction(this._pendingTransactions[message.transactionId]);\n                break;\n            case MSG_ERROR:\n                this.error.dispatch(new Error(\"remote error: \" + message.payload));\n                break;\n            default:\n                this._raiseError(\"unhandled internal message \" + message.id);\n                break;\n        }\n    };\n    RpcProvider.prototype._transactionTimeout = function (transaction) {\n        transaction.reject('transaction timed out');\n        this._raiseError(\"transaction \" + transaction.id + \" timed out\");\n        delete this._pendingTransactions[transaction.id];\n        return;\n    };\n    RpcProvider.prototype._clearTransaction = function (transaction) {\n        if (typeof (transaction.timeoutHandle) !== 'undefined') {\n            clearTimeout(transaction.timeoutHandle);\n        }\n        delete this._pendingTransactions[transaction.id];\n    };\n    return RpcProvider;\n}());\n(function (RpcProvider) {\n    var MessageType;\n    (function (MessageType) {\n        MessageType[MessageType[\"signal\"] = 0] = \"signal\";\n        MessageType[MessageType[\"rpc\"] = 1] = \"rpc\";\n        MessageType[MessageType[\"internal\"] = 2] = \"internal\";\n    })(MessageType = RpcProvider.MessageType || (RpcProvider.MessageType = {}));\n    ;\n})(RpcProvider || (RpcProvider = {}));\nexports.default = RpcProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RpcProvider_1 = require(\"./RpcProvider\");\nexports.RpcProvider = RpcProvider_1.default;\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\ndeclare function postMessage(message: any, transfer?: any): void;\n\nimport { RpcProviderInterface, RpcProvider } from 'worker-rpc';\n\nlet rpcProvider: RpcProvider = null,\n    port: MessagePort = null,\n    portPending: MessagePort = null;\n\nfunction send(message: any, transfer?: any): void {\n    if (port) {\n        port.postMessage(message, transfer);\n    } else {\n        postMessage(message, transfer);\n    }\n\n    if (portPending) {\n        port = portPending;\n        port.onmessage = (e: MessageEvent) => rpcProvider.dispatch(e.data);\n    }\n\n    portPending = null;\n}\n\nrpcProvider = new RpcProvider(send);\nrpcProvider.error.addHandler(e => {\n    console.log(e ? e.message : 'unknown rpc error');\n});\nonmessage = (e: MessageEvent) => port || rpcProvider.dispatch(e.data);\n\nrpcProvider.registerRpcHandler('/use-port', (newPort: MessagePort) => {\n    if (!(port || portPending)) {\n        portPending = newPort;\n        return Promise.resolve();\n    } else {\n        return Promise.reject('RPC already switched to message port');\n    }\n});\n\nexport function getRpc(): RpcProviderInterface {\n    return rpcProvider;\n}\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport RGBASurfaceInterface from './RGBASurfaceInterface';\n\nclass ArrayBufferSurface implements RGBASurfaceInterface {\n    static createFromArrayBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        return new ArrayBufferSurface().replaceUnderlyingBuffer(width, height, buffer);\n    }\n\n    replaceUnderlyingBuffer(width: number, height: number, buffer: ArrayBuffer): ArrayBufferSurface {\n        if (width * height * 4 !== buffer.byteLength) {\n            throw new Error('surface size mismatch');\n        }\n\n        this._width = width;\n        this._height = height;\n        this._underlyingBuffer = buffer;\n\n        this._buffer = new Uint32Array(this._underlyingBuffer);\n\n        return this;\n    }\n\n    getUnderlyingBuffer(): ArrayBuffer {\n        return this._underlyingBuffer;\n    }\n\n    resetUnderlyingBuffer(): ArrayBufferSurface {\n        this._width = this._height = 0;\n        this._underlyingBuffer = this._buffer = null;\n\n        return this;\n    }\n\n    getWidth(): number {\n        return this._width;\n    }\n\n    getHeight(): number {\n        return this._height;\n    }\n\n    getBuffer(): Uint32Array {\n        return this._buffer;\n    }\n\n    getByteOrder(): RGBASurfaceInterface.ByteOrder {\n        return RGBASurfaceInterface.ByteOrder.rgba;\n    }\n\n    fill(value: number): this {\n        for (let i = 0; i < this._buffer.length; i++) {\n            this._buffer[i] = value;\n        }\n\n        return this;\n    }\n\n    private _height = 0;\n    private _width = 0;\n    private _underlyingBuffer: ArrayBuffer;\n\n    private _buffer: Uint32Array = null;\n}\n\nexport { ArrayBufferSurface as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport PoolMemberInterface from './PoolMemberInterface';\n\nclass PoolMember<T> implements PoolMemberInterface<T> {\n    constructor(\n        private _value: T,\n        private _releaseCB: (victim: PoolMember<T>) => void,\n        private _disposeCB: (victim: PoolMember<T>) => void\n    ) {}\n\n    adopt(target: T): void {\n        this._value = target;\n    }\n\n    get(): T {\n        return this._value;\n    }\n\n    release(): void {\n        this._releaseCB(this);\n    }\n\n    dispose(): void {\n        this._disposeCB(this);\n    }\n\n    public _isAvailable = false;\n    public _isDisposed = false;\n    public _poolPosition: number;\n}\n\nexport { PoolMember as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport PoolMember from './PoolMember';\nimport PoolInterface from './PoolInterface';\n\nclass Pool<T> implements PoolInterface<T> {\n    constructor(private _factory: Pool.FactoryInterface<T>) {}\n\n    get(): PoolMember<T> {\n        let member: PoolMember<T>;\n\n        if (this._poolSize === 0) {\n            const newItem = this._factory();\n\n            member = new PoolMember<T>(\n                newItem,\n                (victim: PoolMember<T>) => this._releaseMember(victim),\n                (victim: PoolMember<T>) => this._disposeMember(victim)\n            );\n        } else {\n            member = this._pool[--this._poolSize];\n            member._isAvailable = false;\n        }\n\n        return member;\n    }\n\n    private _releaseMember(victim: PoolMember<T>) {\n        if (victim._isAvailable) {\n            throw new Error('Trying to release an already released pool member');\n        }\n\n        if (victim._isDisposed) {\n            throw new Error('Trying to release an already disposed pool member');\n        }\n\n        const position = this._poolSize++;\n\n        this._pool[position] = victim;\n\n        victim._isAvailable = true;\n        victim._poolPosition = position;\n\n        this.event.release.dispatch(victim.get());\n    }\n\n    private _disposeMember(victim: PoolMember<T>) {\n        if (victim._isDisposed) {\n            throw new Error('Trying to dispose of an already disposed pool member');\n        }\n\n        if (victim._isAvailable) {\n            if (this._poolSize > 1) {\n                this._pool[victim._poolPosition] = this._pool[this._poolSize - 1];\n            }\n\n            this._poolSize--;\n        }\n\n        victim._isDisposed = true;\n\n        this.event.dispose.dispatch(victim.get());\n    }\n\n    event = {\n        release: new Event<T>(),\n        dispose: new Event<T>()\n    };\n\n    private _pool: Array<PoolMember<T>> = [];\n\n    private _poolSize = 0;\n}\n\nnamespace Pool {\n    export interface FactoryInterface<T> {\n        (): T;\n    }\n\n    export interface RecycleCallbackInterface<T> {\n        (value: T): void;\n    }\n\n    export interface DisposeCallbackInterface<T> {\n        (value: T): void;\n    }\n}\n\nexport { Pool as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { ProcessorConfig } from '../config';\n\nexport const messageIds = {\n    configure: 'pipeline/configure',\n    flush: 'pipeline/flush',\n    process: 'pipeline/process',\n    emit: 'pipeline/emit',\n    release: 'pipeline/release'\n};\nObject.freeze(messageIds);\n\nexport interface ConfigureMessage {\n    width: number;\n    height: number;\n    config: Array<ProcessorConfig>;\n}\n\nexport interface FlushMessage {}\n\nexport interface ProcessMessage {\n    id: number;\n    buffer: ArrayBuffer;\n    width: number;\n    height: number;\n}\n\nexport interface EmitMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n\nexport interface ReleaseMessage {\n    id: number;\n    buffer: ArrayBuffer;\n}\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\n\nclass PassthroughProcessor implements ProcessorInterface {\n    init(): void {}\n\n    flush(): void {}\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this.emit.dispatch(surface);\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n}\n\nexport { PassthroughProcessor as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { Event } from 'microevent.ts';\n\nimport ProcessorInterface from './ProcessorInterface';\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\n\nclass FrameMergeProcessor implements ProcessorInterface {\n    init(width: number, height: number) {\n        this.flush();\n\n        this._width = width;\n        this._height = height;\n    }\n\n    flush(): void {\n        for (let i = 0; i < this._nFramesOnHold; i++) {\n            this._framesOnHold[i].release();\n            this._framesOnHold[i] = null;\n        }\n\n        this._nFramesOnHold = 0;\n    }\n\n    processSurface(wrappedSurface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        const surface = wrappedSurface.get();\n\n        if (surface.getHeight() !== this._height || surface.getWidth() !== this._width) {\n            throw new Error('surface dimensions do not match');\n        }\n\n        this._framesOnHold[this._nFramesOnHold++] = wrappedSurface;\n\n        if (this._nFramesOnHold === 2) {\n            this._process();\n        }\n    }\n\n    private _process(): void {\n        const buffer0 = this._framesOnHold[0].get().getBuffer(),\n            buffer1 = this._framesOnHold[1].get().getBuffer();\n\n        for (let i = 0; i < this._width * this._height; i++) {\n            buffer0[i] =\n                0xff000000 |\n                ((((buffer0[i] & 0xff0000) + (buffer1[i] & 0xff0000)) >>> 1) & 0xff0000) |\n                ((((buffer0[i] & 0xff00) + (buffer1[i] & 0xff00)) >>> 1) & 0xff00) |\n                ((((buffer0[i] & 0xff) + (buffer1[i] & 0xff)) >>> 1) & 0xff);\n        }\n\n        this.emit.dispatch(this._framesOnHold[0]);\n        this._framesOnHold[1].release();\n\n        this._nFramesOnHold = 0;\n    }\n\n    emit = new Event<PoolMemberInterface<RGBASurfaceInterface>>();\n\n    private _framesOnHold = new Array<PoolMemberInterface<RGBASurfaceInterface>>(2);\n    private _nFramesOnHold = 0;\n\n    private _width = 0;\n    private _height = 0;\n}\n\nexport { FrameMergeProcessor as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport ProcessorInterface from './ProcessorInterface';\nimport * as Config from './config';\n\nimport PassthroughProcessor from './PassthroughProcessor';\nimport FrameMergeProcessor from './FrameMergeProcessor';\n\nclass ProcessorFactory {\n    create(config: Config.ProcessorConfig): ProcessorInterface {\n        switch (config.type) {\n            case Config.Type.passthrough:\n                return new PassthroughProcessor();\n\n            case Config.Type.merge:\n                return new FrameMergeProcessor();\n\n            default:\n                throw new Error('cannot happen: invalid processor type');\n        }\n    }\n}\n\nexport { ProcessorFactory as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { EventInterface } from 'microevent.ts';\n\nimport RGBASurfaceInterface from '../surface/RGBASurfaceInterface';\nimport PoolMemberInterface from '../../tools/pool/PoolMemberInterface';\nimport ProcessorInterface from './ProcessorInterface';\nimport ProcessorFactory from './ProcessorFactory';\nimport { ProcessorConfig, Type } from './config';\n\nclass ProcessorPipeline implements ProcessorInterface {\n    constructor(config?: Array<ProcessorConfig>) {\n        if (!config || config.length === 0) {\n            config = [{ type: Type.passthrough }];\n        }\n\n        const factory = new ProcessorFactory();\n\n        this._processors = config.map(cfg => factory.create(cfg));\n\n        for (let i = 1; i < this._processors.length; i++) {\n            this._processors[i - 1].emit.addHandler(surface => this._processors[i].processSurface(surface));\n        }\n\n        this.emit = this._processors[this._processors.length - 1].emit;\n    }\n\n    init(width: number, height: number): void {\n        this._processors.forEach(prc => prc.init(width, height));\n    }\n\n    flush(): void {\n        this._processors.forEach(prc => prc.flush());\n    }\n\n    processSurface(surface: PoolMemberInterface<RGBASurfaceInterface>): void {\n        this._processors[0].processSurface(surface);\n    }\n\n    emit: EventInterface<PoolMemberInterface<RGBASurfaceInterface>>;\n\n    private _processors: Array<ProcessorInterface>;\n}\n\nexport { ProcessorPipeline as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { RpcProviderInterface } from 'worker-rpc';\n\nimport ArrayBufferSurface from '../../surface/ArrayBufferSurface';\nimport Pool from '../../../tools/pool/Pool';\nimport PoolMemberInterface from '../../../tools/pool/PoolMemberInterface';\nimport * as messages from './messages';\nimport ProcessorPipeline from '../ProcessorPipeline';\n\nclass PipelineHost {\n    constructor(private _rpc: RpcProviderInterface) {\n        this._rpc\n            .registerRpcHandler(messages.messageIds.configure, this._onConfigure.bind(this))\n            .registerRpcHandler(messages.messageIds.flush, this._onFlush.bind(this))\n            .registerSignalHandler(messages.messageIds.process, this._onProcess.bind(this));\n\n        this._surfacePool.event.release.addHandler(PipelineHost._onReleaseSurface, this);\n    }\n\n    private static _onReleaseSurface(surface: ArrayBufferSurface, self: PipelineHost): void {\n        const buffer = surface.getUnderlyingBuffer();\n\n        if (!buffer) {\n            return;\n        }\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(\n            messages.messageIds.release,\n            {\n                id,\n                buffer\n            } as messages.ReleaseMessage,\n            [buffer]\n        );\n    }\n\n    private static _onEmitSurface(managedSurface: PoolMemberInterface<ArrayBufferSurface>, self: PipelineHost): void {\n        const buffer = managedSurface.get().getUnderlyingBuffer();\n\n        if (!self._bufferIds.has(buffer)) {\n            throw new Error('double release');\n        }\n\n        const id = self._bufferIds.get(buffer);\n        self._bufferIds.delete(buffer);\n\n        self._rpc.signal(\n            messages.messageIds.emit,\n            {\n                id,\n                buffer\n            } as messages.EmitMessage,\n            [buffer]\n        );\n\n        managedSurface.get().resetUnderlyingBuffer();\n        managedSurface.release();\n    }\n\n    private _onConfigure(msg: messages.ConfigureMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n            this._pipeline.emit.removeHandler(PipelineHost._onEmitSurface, this);\n        }\n\n        this._pipeline = new ProcessorPipeline(msg.config);\n        this._pipeline.init(msg.width, msg.height);\n        this._pipeline.emit.addHandler(PipelineHost._onEmitSurface, this);\n    }\n\n    private _onFlush(msg: messages.FlushMessage): void {\n        if (this._pipeline) {\n            this._pipeline.flush();\n        }\n    }\n\n    private _onProcess(msg: messages.ProcessMessage): void {\n        if (!this._pipeline) {\n            return;\n        }\n\n        this._bufferIds.set(msg.buffer, msg.id);\n\n        const managedSurface = this._surfacePool.get();\n        managedSurface.get().replaceUnderlyingBuffer(msg.width, msg.height, msg.buffer);\n\n        this._pipeline.processSurface(managedSurface);\n    }\n\n    private _pipeline: ProcessorPipeline = null;\n    private _surfacePool = new Pool<ArrayBufferSurface>(() => new ArrayBufferSurface());\n    private _bufferIds = new WeakMap<ArrayBuffer, number>();\n}\n\nexport { PipelineHost as default };\n","/*\n *   This file is part of 6502.ts, an emulator for 6502 based systems built\n *   in Typescript.\n *\n *   Copyright (C) 2014 - 2018 Christian Speckner & contributors\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation; either version 2 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License along\n *   with this program; if not, write to the Free Software Foundation, Inc.,\n *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n\nimport { getRpc } from '../rpc';\nimport PipelineHost from '../../../src/video/processing/worker/PipelineHost';\n\nexport const pipelineHost = new PipelineHost(getRpc());\n"],"names":["Object","defineProperty","exports","value","factories","getFactory","handlerCount","src","argsHandlers","argsContexts","i","push","Function","bind","apply","concat","compileFactory","callback","context","payload","Event","this","hasHandlers","_handlers","_contexts","_createDispatcher","prototype","addHandler","handler","isHandlerAttached","_updateHasHandlers","removeHandler","idx","_getHandlerIndex","splice","length","undefined","dispatch","Event_1","default","RpcProvider","_dispatch","_rpcTimeout","error","microevent_ts_1","_rpcHandlers","_signalHandlers","_pendingTransactions","_nextTransactionId","message","type","MessageType","signal","_handleSignal","rpc","_handeRpc","internal","_handleInternal","_raiseError","id","transfer","_this","transactionId","Promise","resolve","reject","transaction","timeoutHandle","setTimeout","_transactionTimeout","registerRpcHandler","Error","registerSignalHandler","deregisterRpcHandler","deregisterSignalHandler","filter","h","forEach","then","result","reason","_clearTransaction","clearTimeout","RpcProvider_1","rpcProvider","port","portPending","postMessage","onmessage","e","data","console","log","newPort","ArrayBufferSurface","[object Object]","width","height","buffer","replaceUnderlyingBuffer","byteLength","_width","_height","_underlyingBuffer","_buffer","Uint32Array","PoolMember","_value","_releaseCB","_disposeCB","target","Pool","_factory","release","dispose","member","_poolSize","newItem","victim","_releaseMember","_disposeMember","_pool","_isAvailable","_isDisposed","position","_poolPosition","event","get","messageIds","configure","flush","process","emit","freeze","PassthroughProcessor","surface","FrameMergeProcessor","Array","_nFramesOnHold","_framesOnHold","wrappedSurface","getHeight","getWidth","_process","buffer0","getBuffer","buffer1","ProcessorFactory","config","ProcessorPipeline","factory","_processors","map","cfg","create","processSurface","prc","init","PipelineHost","_rpc","WeakMap","messages.messageIds","_onConfigure","_onFlush","_onProcess","_surfacePool","_onReleaseSurface","self","getUnderlyingBuffer","_bufferIds","has","delete","managedSurface","resetUnderlyingBuffer","msg","_pipeline","_onEmitSurface","set","pipelineHost"],"mappings":"4NACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtD,IAAIC,EAAY,GAWhB,SAASC,EAAWC,GAGhB,OAFKF,EAAUE,KACXF,EAAUE,GAGlB,SAAwBA,GAGpB,IAFA,IAAIC,EAAM,6BAA+BD,EAAe,gBACpDE,EAAe,GAAIC,EAAe,GAC7BC,EAAI,EAAGA,EAAIJ,EAAcI,IAC9BF,EAAaG,KAAK,KAAOD,GACzBD,EAAaE,KAAK,MAAQD,GAC1BH,GAAO,SAAWG,EAAI,gBAAkBA,EAAI,OAGhD,OADAH,GAAO,KACA,IAAKK,SAASC,KAAKC,MAAMF,SAAU,MAAC,GAAQG,OAAOP,EAAaO,OAAON,GAAe,CAACF,MAZhES,CAAeV,IACtCF,EAAUE,GAbrBF,EAAU,GAAK,WACX,OAAO,cAEXA,EAAU,GAAK,SAAUa,EAAUC,GAC/B,YAAyB,MACdD,EACJ,SAAqBE,GACxBF,EAASE,EAASD,KAmB1B,IAAIE,EAAuB,WACvB,SAASA,IACLC,KAAKC,aAAc,EACnBD,KAAKE,UAAY,GACjBF,KAAKG,UAAY,GACjBH,KAAKI,oBAuCT,OArCAL,EAAMM,UAAUC,WAAa,SAAUC,EAASV,GAO5C,OANKG,KAAKQ,kBAAkBD,EAASV,KACjCG,KAAKE,UAAUZ,KAAKiB,GACpBP,KAAKG,UAAUb,KAAKO,GACpBG,KAAKI,oBACLJ,KAAKS,sBAEFT,MAEXD,EAAMM,UAAUK,cAAgB,SAAUH,EAASV,GAC/C,IAAIc,EAAMX,KAAKY,iBAAiBL,EAASV,GAOzC,YANqB,QACjBG,KAAKE,UAAUW,OAAOF,EAAK,GAC3BX,KAAKG,UAAUU,OAAOF,EAAK,GAC3BX,KAAKI,oBACLJ,KAAKS,sBAEFT,MAEXD,EAAMM,UAAUG,kBAAoB,SAAUD,EAASV,GACnD,YAA4D,IAA7CG,KAAKY,iBAAiBL,EAASV,IAElDE,EAAMM,UAAUI,mBAAqB,WACjCT,KAAKC,cAAgBD,KAAKE,UAAUY,QAExCf,EAAMM,UAAUO,iBAAmB,SAAUL,EAASV,GAClD,IACIc,EADA1B,EAAee,KAAKE,UAAUY,OAElC,IAAKH,EAAM,EAAGA,EAAM1B,IACZe,KAAKE,UAAUS,KAASJ,GAAWP,KAAKG,UAAUQ,KAASd,GADjCc,KAIlC,OAAOA,EAAM1B,EAAe0B,OAAMI,GAEtChB,EAAMM,UAAUD,kBAAoB,WAChCJ,KAAKgB,SAAWhC,EAAWgB,KAAKE,UAAUY,QAAQrB,MAAMO,KAAMA,KAAKE,UAAUR,OAAOM,KAAKG,aAEtFJ,KAEXlB,UAAkBkB,iCC1ElBpB,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtDD,QAAgBoC,EAAQC,iDCFxBvC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtD,IACIqC,EAA6B,WAC7B,SAASA,EAAYC,EAAWC,QACR,IAAhBA,IAA0BA,EAAc,GAC5CrB,KAAKoB,UAAYA,EACjBpB,KAAKqB,YAAcA,EACnBrB,KAAKsB,MAAQ,IAAIC,EAAgBxB,MACjCC,KAAKwB,aAAe,GACpBxB,KAAKyB,gBAAkB,GACvBzB,KAAK0B,qBAAuB,GAC5B1B,KAAK2B,mBAAqB,EA8I9B,OA5IAR,EAAYd,UAAUW,SAAW,SAAUlB,GACvC,IAAI8B,EAAU9B,EACd,OAAQ8B,EAAQC,MACZ,KAAKV,EAAYW,YAAYC,OACzB,OAAO/B,KAAKgC,cAAcJ,GAC9B,KAAKT,EAAYW,YAAYG,IACzB,OAAOjC,KAAKkC,UAAUN,GAC1B,KAAKT,EAAYW,YAAYK,SACzB,OAAOnC,KAAKoC,gBAAgBR,GAChC,QACI5B,KAAKqC,YAAY,wBAA0BT,EAAQC,QAG/DV,EAAYd,UAAU4B,IAAM,SAAUK,EAAIxC,EAASyC,GAC/C,IAAIC,EAAQxC,KACRyC,EAAgBzC,KAAK2B,qBAOzB,OANA3B,KAAKoB,UAAU,CACXS,KAAMV,EAAYW,YAAYG,IAC9BQ,cAAeA,EACfH,GAAIA,EACJxC,QAASA,GACVyC,QAAsBxB,GAClB,IAAI2B,SAAQ,SAAUC,EAASC,GAClC,IAAIC,EAAcL,EAAMd,qBAAqBe,GAAiB,CAC1DH,GAAIG,EACJE,QAASA,EACTC,OAAQA,GAERJ,EAAMnB,YAAc,IACpBmB,EAAMd,qBAAqBe,GAAeK,cACtCC,YAAW,WAAc,OAAOP,EAAMQ,oBAAoBH,KAAiBL,EAAMnB,kBAKjGF,EAAYd,UAAU0B,OAAS,SAAUO,EAAIxC,EAASyC,GAMlD,OALAvC,KAAKoB,UAAU,CACXS,KAAMV,EAAYW,YAAYC,OAC9BO,GAAIA,EACJxC,QAASA,GACVyC,QAAsBxB,GAClBf,MAEXmB,EAAYd,UAAU4C,mBAAqB,SAAUX,EAAI/B,GACrD,GAAIP,KAAKwB,aAAac,GAClB,MAAM,IAAIY,MAAM,mBAAqBZ,EAAK,uBAG9C,OADAtC,KAAKwB,aAAac,GAAM/B,EACjBP,MAGXmB,EAAYd,UAAU8C,sBAAwB,SAAUb,EAAI/B,GAKxD,OAJKP,KAAKyB,gBAAgBa,KACtBtC,KAAKyB,gBAAgBa,GAAM,IAE/BtC,KAAKyB,gBAAgBa,GAAIhD,KAAKiB,GACvBP,MAEXmB,EAAYd,UAAU+C,qBAAuB,SAAUd,EAAI/B,GAIvD,OAHIP,KAAKwB,aAAac,WACXtC,KAAKwB,aAAac,GAEtBtC,MAGXmB,EAAYd,UAAUgD,wBAA0B,SAAUf,EAAI/B,GAI1D,OAHIP,KAAKyB,gBAAgBa,KACrBtC,KAAKyB,gBAAgBa,GAAMtC,KAAKyB,gBAAgBa,GAAIgB,QAAO,SAAUC,GAAK,OAAOhD,IAAYgD,MAE1FvD,MAEXmB,EAAYd,UAAUgC,YAAc,SAAUf,GAC1CtB,KAAKsB,MAAMN,SAAS,IAAIkC,MAAM5B,IAC9BtB,KAAKoB,UAAU,CACXS,KAAMV,EAAYW,YAAYK,SAC9BG,GAvFoG,QAwFpGxC,QAASwB,KAGjBH,EAAYd,UAAU2B,cAAgB,SAAUJ,GAC5C,IAAK5B,KAAKyB,gBAAgBG,EAAQU,IAC9B,OAAOtC,KAAKqC,YAAY,kBAAoBT,EAAQU,IAExDtC,KAAKyB,gBAAgBG,EAAQU,IAAIkB,SAAQ,SAAUjD,GAAW,OAAOA,EAAQqB,EAAQ9B,aAEzFqB,EAAYd,UAAU6B,UAAY,SAAUN,GACxC,IAAIY,EAAQxC,KACZ,IAAKA,KAAKwB,aAAaI,EAAQU,IAC3B,OAAOtC,KAAKqC,YAAY,eAAiBT,EAAQU,IAErDI,QAAQC,QAAQ3C,KAAKwB,aAAaI,EAAQU,IAAIV,EAAQ9B,UACjD2D,MAAK,SAAUC,GAAU,OAAOlB,EAAMpB,UAAU,CACjDS,KAAMV,EAAYW,YAAYK,SAC9BG,GAzGkB,sBA0GlBG,cAAeb,EAAQa,cACvB3C,QAAS4D,OACN,SAAUC,GAAU,OAAOnB,EAAMpB,UAAU,CAC9CS,KAAMV,EAAYW,YAAYK,SAC9BG,GA9GkE,qBA+GlEG,cAAeb,EAAQa,cACvB3C,QAAS6D,QAGjBxC,EAAYd,UAAU+B,gBAAkB,SAAUR,GAC9C,IAAIiB,OAAiD,IAA3BjB,EAAqB,cAAoB5B,KAAK0B,qBAAqBE,EAAQa,oBAAiB1B,EACtH,OAAQa,EAAQU,IACZ,IAtHkB,sBAuHd,IAAKO,QAAkD,IAA3BjB,EAAqB,cAC7C,OAAO5B,KAAKqC,YAAY,kCAAoCT,EAAQa,eAExEI,EAAYF,QAAQf,EAAQ9B,SAC5BE,KAAK4D,kBAAkB5D,KAAK0B,qBAAqBE,EAAQa,gBACzD,MACJ,IA7HkE,qBA8H9D,IAAKI,QAAkD,IAA3BjB,EAAqB,cAC7C,OAAO5B,KAAKqC,YAAY,kCAAoCT,EAAQa,eAExEzC,KAAK0B,qBAAqBE,EAAQa,eAAeG,OAAOhB,EAAQ9B,SAChEE,KAAK4D,kBAAkB5D,KAAK0B,qBAAqBE,EAAQa,gBACzD,MACJ,IApIoG,QAqIhGzC,KAAKsB,MAAMN,SAAS,IAAIkC,MAAM,iBAAmBtB,EAAQ9B,UACzD,MACJ,QACIE,KAAKqC,YAAY,8BAAgCT,EAAQU,MAIrEnB,EAAYd,UAAU2C,oBAAsB,SAAUH,GAClDA,EAAYD,OAAO,yBACnB5C,KAAKqC,YAAY,eAAiBQ,EAAYP,GAAK,qBAC5CtC,KAAK0B,qBAAqBmB,EAAYP,KAGjDnB,EAAYd,UAAUuD,kBAAoB,SAAUf,QACL,IAA/BA,EAAyB,eACjCgB,aAAahB,EAAYC,sBAEtB9C,KAAK0B,qBAAqBmB,EAAYP,KAE1CnB,MAEX,SAAWA,IAEP,SAAWW,GACPA,EAAYA,EAAoB,OAAI,GAAK,SACzCA,EAAYA,EAAiB,IAAI,GAAK,MACtCA,EAAYA,EAAsB,SAAI,GAAK,WAH/C,CAIiBX,EAAYW,cAAgBX,EAAYW,YAAc,KAN3E,CAQGX,IAAgBA,EAAc,KACjCtC,UAAkBsC,iCCrKlBxC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtDD,cAAsBiF,EAAc5C,oCCsBpC,IAAI6C,EAA2B,KAC3BC,EAAoB,KACpBC,EAA2B,KAiB/BF,EAAc,IAAI5C,GAflB,SAAcS,EAAcW,GACpByB,EACAA,EAAKE,YAAYtC,EAASW,GAE1B2B,YAAYtC,EAASW,GAGrB0B,IACAD,EAAOC,EACPD,EAAKG,UAAaC,GAAoBL,EAAY/C,SAASoD,EAAEC,OAGjEJ,EAAc,QAIlBF,EAAYzC,MAAMhB,WAAW8D,IACzBE,QAAQC,IAAIH,EAAIA,EAAExC,QAAU,uBAEhCuC,UAAaC,GAAoBJ,GAAQD,EAAY/C,SAASoD,EAAEC,MAEhEN,EAAYd,mBAAmB,YAAcuB,GACnCR,GAAQC,EAIHvB,QAAQE,OAAO,yCAHtBqB,EAAcO,EACP9B,QAAQC,YC9BvB,MAAM8B,EAANC,cAsDY1E,aAAU,EACVA,YAAS,EAGTA,aAAuB,KAzD/B0E,6BAA6BC,EAAeC,EAAgBC,GACxD,OAAO,IAAIJ,GAAqBK,wBAAwBH,EAAOC,EAAQC,GAG3EH,wBAAwBC,EAAeC,EAAgBC,GACnD,GAAIF,EAAQC,EAAS,IAAMC,EAAOE,WAC9B,MAAM,IAAI7B,MAAM,yBASpB,OANAlD,KAAKgF,OAASL,EACd3E,KAAKiF,QAAUL,EACf5E,KAAKkF,kBAAoBL,EAEzB7E,KAAKmF,QAAU,IAAIC,YAAYpF,KAAKkF,mBAE7BlF,KAGX0E,sBACI,OAAO1E,KAAKkF,kBAGhBR,wBAII,OAHA1E,KAAKgF,OAAShF,KAAKiF,QAAU,EAC7BjF,KAAKkF,kBAAoBlF,KAAKmF,QAAU,KAEjCnF,KAGX0E,WACI,OAAO1E,KAAKgF,OAGhBN,YACI,OAAO1E,KAAKiF,QAGhBP,YACI,OAAO1E,KAAKmF,QAGhBT,eACI,SAGJA,KAAK5F,GACD,IAAK,IAAIO,EAAI,EAAGA,EAAIW,KAAKmF,QAAQrE,OAAQzB,IACrCW,KAAKmF,QAAQ9F,GAAKP,EAGtB,OAAOkB,MCnDf,MAAMqF,EACFX,YACYY,EACAC,EACAC,GAFAxF,YAAAsF,EACAtF,gBAAAuF,EACAvF,gBAAAwF,EAmBLxF,mBAAe,EACfA,kBAAc,EAjBrB0E,MAAMe,GACFzF,KAAKsF,OAASG,EAGlBf,MACI,OAAO1E,KAAKsF,OAGhBZ,UACI1E,KAAKuF,WAAWvF,MAGpB0E,UACI1E,KAAKwF,WAAWxF,OCjBxB,MAAM0F,EACFhB,YAAoBiB,GAAA3F,cAAA2F,EA0DpB3F,WAAQ,CACJ4F,QAAS,IAAI7F,EACb8F,QAAS,IAAI9F,GAGTC,WAA8B,GAE9BA,eAAY,EA/DpB0E,MACI,IAAIoB,EAEJ,GAAuB,IAAnB9F,KAAK+F,UAAiB,CACtB,MAAMC,EAAUhG,KAAK2F,WAErBG,EAAS,IAAIT,EACTW,EACCC,GAA0BjG,KAAKkG,eAAeD,GAC9CA,GAA0BjG,KAAKmG,eAAeF,SAGnDH,EAAS9F,KAAKoG,QAAQpG,KAAK+F,WAC3BD,EAAOO,cAAe,EAG1B,OAAOP,EAGHpB,eAAeuB,GACnB,GAAIA,EAAOI,aACP,MAAM,IAAInD,MAAM,qDAGpB,GAAI+C,EAAOK,YACP,MAAM,IAAIpD,MAAM,qDAGpB,MAAMqD,EAAWvG,KAAK+F,YAEtB/F,KAAKoG,MAAMG,GAAYN,EAEvBA,EAAOI,cAAe,EACtBJ,EAAOO,cAAgBD,EAEvBvG,KAAKyG,MAAMb,QAAQ5E,SAASiF,EAAOS,OAG/BhC,eAAeuB,GACnB,GAAIA,EAAOK,YACP,MAAM,IAAIpD,MAAM,wDAGhB+C,EAAOI,eACHrG,KAAK+F,UAAY,IACjB/F,KAAKoG,MAAMH,EAAOO,eAAiBxG,KAAKoG,MAAMpG,KAAK+F,UAAY,IAGnE/F,KAAK+F,aAGTE,EAAOK,aAAc,EAErBtG,KAAKyG,MAAMZ,QAAQ7E,SAASiF,EAAOS,QC3DpC,MAAMC,EAAa,CACtBC,UAAW,qBACXC,MAAO,iBACPC,QAAS,mBACTC,KAAM,gBACNnB,QAAS,oBAEbjH,OAAOqI,OAAOL,GCHd,MAAMM,EAANvC,cASI1E,UAAO,IAAID,EARX2E,QAEAA,SAEAA,eAAewC,GACXlH,KAAK+G,KAAK/F,SAASkG,ICN3B,MAAMC,EAANzC,cAiDI1E,UAAO,IAAID,EAEHC,mBAAgB,IAAIoH,MAAiD,GACrEpH,oBAAiB,EAEjBA,YAAS,EACTA,aAAU,EAtDlB0E,KAAKC,EAAeC,GAChB5E,KAAK6G,QAEL7G,KAAKgF,OAASL,EACd3E,KAAKiF,QAAUL,EAGnBF,QACI,IAAK,IAAIrF,EAAI,EAAGA,EAAIW,KAAKqH,eAAgBhI,IACrCW,KAAKsH,cAAcjI,GAAGuG,UACtB5F,KAAKsH,cAAcjI,GAAK,KAG5BW,KAAKqH,eAAiB,EAG1B3C,eAAe6C,GACX,MAAML,EAAUK,EAAeb,MAE/B,GAAIQ,EAAQM,cAAgBxH,KAAKiF,SAAWiC,EAAQO,aAAezH,KAAKgF,OACpE,MAAM,IAAI9B,MAAM,mCAGpBlD,KAAKsH,cAActH,KAAKqH,kBAAoBE,EAEhB,IAAxBvH,KAAKqH,gBACLrH,KAAK0H,WAILhD,WACJ,MAAMiD,EAAU3H,KAAKsH,cAAc,GAAGZ,MAAMkB,YACxCC,EAAU7H,KAAKsH,cAAc,GAAGZ,MAAMkB,YAE1C,IAAK,IAAIvI,EAAI,EAAGA,EAAIW,KAAKgF,OAAShF,KAAKiF,QAAS5F,IAC5CsI,EAAQtI,GACJ,YACiB,SAAbsI,EAAQtI,KAA+B,SAAbwI,EAAQxI,MAAoB,EAAK,UAC9C,MAAbsI,EAAQtI,KAA6B,MAAbwI,EAAQxI,MAAkB,EAAK,OAC1C,IAAbsI,EAAQtI,KAA2B,IAAbwI,EAAQxI,MAAgB,EAAK,IAG/DW,KAAK+G,KAAK/F,SAAShB,KAAKsH,cAAc,IACtCtH,KAAKsH,cAAc,GAAG1B,UAEtB5F,KAAKqH,eAAiB,GC9C9B,MAAMS,EACFpD,OAAOqD,GACH,OAAQA,EAAOlG,MACX,OACI,OAAO,IAAIoF,EAEf,OACI,OAAO,IAAIE,EAEf,QACI,MAAM,IAAIjE,MAAM,2CCRhC,MAAM8E,EACFtD,YAAYqD,GACHA,GAA4B,IAAlBA,EAAOjH,SAClBiH,EAAS,CAAC,CAAElG,UAGhB,MAAMoG,EAAU,IAAIH,EAEpB9H,KAAKkI,YAAcH,EAAOI,IAAIC,GAAOH,EAAQI,OAAOD,IAEpD,IAAK,IAAI/I,EAAI,EAAGA,EAAIW,KAAKkI,YAAYpH,OAAQzB,IACzCW,KAAKkI,YAAY7I,EAAI,GAAG0H,KAAKzG,WAAW4G,GAAWlH,KAAKkI,YAAY7I,GAAGiJ,eAAepB,IAG1FlH,KAAK+G,KAAO/G,KAAKkI,YAAYlI,KAAKkI,YAAYpH,OAAS,GAAGiG,KAG9DrC,KAAKC,EAAeC,GAChB5E,KAAKkI,YAAY1E,QAAQ+E,GAAOA,EAAIC,KAAK7D,EAAOC,IAGpDF,QACI1E,KAAKkI,YAAY1E,QAAQ+E,GAAOA,EAAI1B,SAGxCnC,eAAewC,GACXlH,KAAKkI,YAAY,GAAGI,eAAepB,IC1B3C,MAAMuB,EACF/D,YAAoBgE,GAAA1I,UAAA0I,EAsFZ1I,eAA+B,KAC/BA,kBAAe,IAAI0F,EAAyB,IAAM,IAAIjB,GACtDzE,gBAAa,IAAI2I,QAvFrB3I,KAAK0I,KACAzF,mBAAmB2F,EAAoBhC,UAAW5G,KAAK6I,aAAarJ,KAAKQ,OACzEiD,mBAAmB2F,EAAoB/B,MAAO7G,KAAK8I,SAAStJ,KAAKQ,OACjEmD,sBAAsByF,EAAoB9B,QAAS9G,KAAK+I,WAAWvJ,KAAKQ,OAE7EA,KAAKgJ,aAAavC,MAAMb,QAAQtF,WAAWmI,EAAaQ,kBAAmBjJ,MAGvE0E,yBAAyBwC,EAA6BgC,GAC1D,MAAMrE,EAASqC,EAAQiC,sBAEvB,IAAKtE,EACD,OAGJ,IAAKqE,EAAKE,WAAWC,IAAIxE,GACrB,MAAM,IAAI3B,MAAM,kBAGpB,MAAMZ,EAAK4G,EAAKE,WAAW1C,IAAI7B,GAC/BqE,EAAKE,WAAWE,OAAOzE,GAEvBqE,EAAKR,KAAK3G,OACN6G,EAAoBhD,QACpB,CACItD,GAAAA,EACAuC,OAAAA,GAEJ,CAACA,IAIDH,sBAAsB6E,EAAyDL,GACnF,MAAMrE,EAAS0E,EAAe7C,MAAMyC,sBAEpC,IAAKD,EAAKE,WAAWC,IAAIxE,GACrB,MAAM,IAAI3B,MAAM,kBAGpB,MAAMZ,EAAK4G,EAAKE,WAAW1C,IAAI7B,GAC/BqE,EAAKE,WAAWE,OAAOzE,GAEvBqE,EAAKR,KAAK3G,OACN6G,EAAoB7B,KACpB,CACIzE,GAAAA,EACAuC,OAAAA,GAEJ,CAACA,IAGL0E,EAAe7C,MAAM8C,wBACrBD,EAAe3D,UAGXlB,aAAa+E,GACbzJ,KAAK0J,YACL1J,KAAK0J,UAAU7C,QACf7G,KAAK0J,UAAU3C,KAAKrG,cAAc+H,EAAakB,eAAgB3J,OAGnEA,KAAK0J,UAAY,IAAI1B,EAAkByB,EAAI1B,QAC3C/H,KAAK0J,UAAUlB,KAAKiB,EAAI9E,MAAO8E,EAAI7E,QACnC5E,KAAK0J,UAAU3C,KAAKzG,WAAWmI,EAAakB,eAAgB3J,MAGxD0E,SAAS+E,GACTzJ,KAAK0J,WACL1J,KAAK0J,UAAU7C,QAIfnC,WAAW+E,GACf,IAAKzJ,KAAK0J,UACN,OAGJ1J,KAAKoJ,WAAWQ,IAAIH,EAAI5E,OAAQ4E,EAAInH,IAEpC,MAAMiH,EAAiBvJ,KAAKgJ,aAAatC,MACzC6C,EAAe7C,MAAM5B,wBAAwB2E,EAAI9E,MAAO8E,EAAI7E,OAAQ6E,EAAI5E,QAExE7E,KAAK0J,UAAUpB,eAAeiB,UCzFzBM,EAAe,IAAIpB,EVoCrB1E"}